---
title: Лекция 1. Введение и простые решения
bibliography: refs.bib
crossref:
  chapters: true
format: 
  docx:
    toc: true
    number-sections: true
    highlight-style: github
  #html:
  #  grid:
  #      margin-width: 400px
  #  toc: true
  #  toc-depth: 1
  #  toc-expand: 2
  #  number-sections: true
  #  section-numbering: 1.1.1
  #  lang: ru
  #  embed-resources: true    
  #  code-fold: true
  #  code-summary: "Показать код"
  pdf:
    toc: true
    number-sections: true
    section-numbering: 1.1.1
    lang: ru
    mainfont: Times New Roman
    sansfont: Comic Sans MS
    monofont: Courier New
    monofontoptions: 
       - Scale=0.8
  #typst:
  #  toc: true
  #  toc-depth: 2
  #  toc-title: Оглавление
  #  number-sections: true
  #  section-numbering: 1.1.1
  #  lang: ru   
#reference-location: margin
#citation-location: margin
---


версия 0.5 от 15.09.2025

Хабибуллин Ринат

# Введение в дисциплину. Моделирование при исследовании скважин и пластов

## Картинки и код для проверки


Часто для анализа уравнений неустановившейся фильтрации используются безразмерные переменные. Мы будем использовать переменные в виде:

$$ 
r_D = \frac{r}{r_w} 
$$

$$ 
t_D = \frac{kt}{\varphi \mu c_t r_w^2}
$$

$$ 
p_D = \frac{2 \pi kh}{q_s B \mu} \left( p_i - p_{wf} \right) 
$$

$$ 
q_D = \frac{q}{q_{ref}} 
$$

Здесь использованы единицы измерения СИ.

-   $q_s$ - дебит скважины на поверхности, приведенный к нормальным условиям м3/с
-   $\varphi$ - пористость, доли единиц
-   $\mu$ - вязкость нефти в пласте, Па с
-   $B$ - объемный коэффициент нефти, м3/м3
-   $p_i$ - начальное давление в пласте, Па
-   $p_{wf}$ - давление забойное, Па
-   $c_t$ - общая сжимаемость системы в пласте, 1/Па

Использование безразмерных переменных позволяет упростить уравнение фильтрации, которое примет вид

$$ 
\frac{\partial p_D}{ \partial t_D} = \frac{1}{r_D} \frac{ \partial{ \left( r_D \dfrac{\partial p_D}{ \partial r_D} \right) } }{ \partial{r_D} } 
$$

$$ 
\frac{\partial p_D}{ \partial t_D} = \dfrac{1}{r_D} \left[ \dfrac{\partial}{\partial r_D} \left( r_D \dfrac{ \partial p_D} {\partial r_D} \right) \right] 
$$

Решение этого уравнения - функция безразмерного давления от безразмерных времени и расстояния $p_D(r_D, t_D)$

Для практических расчетов удобнее бывает использовать безразмерные переменные полученные для практических метрических единиц измерения. 

::: {.callout-tip}
## Определение безразмерных переменных в практических метрических единицах
$$ 
r_D = \frac{r}{r_w} 
$$

$$ 
t_D = \frac{0.00036 kt}{\varphi \mu c_t r_w^2}
$$

$$ 
p_D = \frac{kh}{ 18.4 q_s B \mu} \left( p_i - p_{wf} \right) 
$$

$$ 
q_D = \frac{q}{q_{ref}} 
$$

Здесь использованы практические метрические единицы измерения.

-   $q_s$ - дебит скважины на поверхности, приведенный к нормальным условиям м3/сут
-   $\varphi$ - пористость, доли единиц
-   $\mu$ - вязкость нефти в пласте, сП
-   $B$ - объемный коэффициент нефти, м3/м3
-   $p_i$ - начальное давление в пласте, атм
-   $p_{wf}$ - давление забойное, атм
-   $c_t$ - общая сжимаемость системы в пласте, 1/атм

:::



## Расчет решения с использованием python

Для работы с решениями уравнения фильтрации удобно использовать язык программирования python. Расчет на python может быть реализован на основе библиотек numpy scipy.

```{python}
#| code-fold: false
"""
Импортируем библиотеки для расчетов. 
numpy - для работы с массивами и подготовки данных 
matplotlib - для построения графиков
scipy - для решения линейных уравнений
"""
import numpy as np
import matplotlib.pyplot as plt
import scipy
```

Для удобства дальнейшего изложения и использования расчетных функций при создании функций и переменных на языке python названия формируются по следующим принципам:

- сначала указывается, что расчитывается в функции, в данном случае - давление `p` или `dp`
- потом указываются пояснения - в данном случае `dp_ss` - steady state pressure
- в конце указывается размерность в которой ожидается получаение ответа - в данном случае `atma` - абсолютные атмосферы.

```{python}
#| code-fold: false
"""
Определим функции для расчета стационарного решения
"""
def dp_ss_atm(q_liq_sm3day = 50,
               mu_cP = 1,
               b_m3m3 = 1.2,
               kh_mDm = 40,
               r_e_m = 240,
               r_m = 0.1):
  """
  функция расчета перепада давления в произвольной точке пласта 
  на расстоянии r_m от центра скважины для стационарного решения
  - q_liq_sm3day - дебит жидкости на поверхности в стандартных условиях
  - mu_cP - вязкость нефти (в пластовых условиях)
  - B_m3m3 - объемный коэффициент нефти 
  - kh_mDm - kh пласта
  - r_e_m - радиус контрура питания, м  
  - r_m - расстояние на котором проводится расчет, м
  """
  return 18.42 * q_liq_sm3day * mu_cP * b_m3m3/ kh_mDm * np.log(r_e_m/r_m)

def p_ss_atma(p_res_atma = 250,
              q_liq_sm3day = 50,
              mu_cP = 1,
              b_m3m3 = 1.2,
              k_mD = 40,
              h_m = 10,
              r_e_m = 240,
              r_m = 0.1):
  """
  функция расчета давления в произвольной точке пласта 
  на расстоянии r_m от центра скважины для стационарного решения 
  - p_res_atma - пластовое давление, давление на контуре питания
  - q_liq_sm3day - дебит жидкости на поверхности в стандартных условиях
  - mu_cP - вязкость нефти (в пластовых условиях)
  - B_m3m3 - объемный коэффициент нефти 
  - k_mD - проницаемость пласта
  - h_m - мощность пласта, м
  - r_e_m - радиус контрура питания, м  
  - r_m - расстояние на котором проводится расчет, м
  """
  return p_res_atma - dp_ss_atm(q_liq_sm3day = q_liq_sm3day,
                                mu_cP = mu_cP,
                                b_m3m3 = b_m3m3,
                                kh_mDm = k_mD * h_m,
                                r_e_m = r_e_m,
                                r_m = r_m)
```

Функции расчетов могут быть использованы для построения графиков, например с использованием matplotlib



```{python .content-visible when-format="html"}
#| label: fig-stac_pressure_dist_1
#| fig-cap: Распределение давления в круговом пласте

"""
Построим график распределения давления в пласте
"""
# формируем массив расстояний для которых будем проводить расчет
r_arr = np.linspace(0.1, 100, 500) 

# рассчитываем массив давлений на соответствующих расстояниях
# для расчета используется векторный расчет numpy - нет необходимости делать цикл в явном виде
# для примера показана передача всех аргументов созданной функции
p_arr = p_ss_atma(p_res_atma = 250,
                  q_liq_sm3day = 50,
                  mu_cP = 1,
                  b_m3m3 = 1.2,
                  k_mD = 40,
                  h_m = 10,
                  r_e_m = 240,
                  r_m = r_arr)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(5,8))

# рисуем график в обычных координатах
ax1.plot(r_arr, p_arr)   # команда отрисовки графика по заданным массивам
ax1.plot(-r_arr, p_arr)   # отрицательная ветка
# настраиваем график

ax1.set_xlabel('r, m')
ax1.set_ylabel('p, atma')

# рисуем график в логарифмических координатах
ax2.plot(r_arr, p_arr)   # команда отрисовки графика по заданным массивам
ax2.plot(-r_arr, p_arr)   # отрицательная ветка
# настраиваем график
ax2.set_xlabel('r, m')
ax2.set_xscale('symlog', linthresh=0.1, linscale=0.6)
plt.show()
```




можно получить выражение
$$
p_D(r_D,t_D, dQ_D) =-\frac{dQ_D t_D }{2} \left[ \left( 1+ \frac{r_D^2}{4 t_D} \right) Ei \left(- \dfrac{r_D^2}{4t_D} \right) + e^{-\dfrac{r_D^2}{4t_D}} \right]
$$ {#eq-ei_sol_lin_rate}

где $dQ_D$ - скорость изменения дебита.

Для таблично заданных дебитов и времен можно оценить 

$$
dQ_{D(i)} = \dfrac{Q_{D(i)}-Q_{D(i-1)}}{t_{D(i)} - t_{D(i-1)} }
$$

Cравните формулу (-@eq-ei_sol_lin_rate) с формулой (9.68) в книге Щелкачева "Основы неустановившейся фильтрации" [@shchelkachevOsnovyPrilozheniyaTeorii1995]

Тогда, используя принцип суперпозиции, можем выписать выражение для изменения давления на скважине и вокруг нее для произвольного момента времени

$$
P_{mr.D}(t_D, r_D) = \sum_i  p_D\left(t_D-t_{D(i)}, r_D, dQ_{D(i+1)} - dQ_{D(i)}\right)\cdot \mathcal{H}(t_D-t_{D(i)})
$$ {#eq-sol_lin_superposition}
